import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import Header from './components/Header';
import Dashboard from './components/Dashboard';
import ReadingInterface from './components/ReadingInterface';
import UztazFeedback from './components/UztazFeedback';
import { UserProgress, ReadingSession, ChatMessage } from './types';
import { v4 as uuidv4 } from 'uuid';

function App() {
  const [currentView, setCurrentView] = useState<'dashboard' | 'reading'>('dashboard');
  const [currentSession, setCurrentSession] = useState<ReadingSession | null>(null);
  const [selectedWord, setSelectedWord] = useState<string | null>(null);
  
  const [userProgress] = useState<UserProgress>({
    level: 5,
    xp: 2350,
    streakDays: 7,
    totalReadingTime: 1800, // in seconds
    completedSessions: 23,
    badges: [
      {
        id: '1',
        name: 'First Steps',
        description: 'Complete your first reading session',
        icon: 'üèÜ',
        earnedAt: new Date()
      }
    ]
  });

  const [recentSessions] = useState<ReadingSession[]>([
    {
      id: '1',
      title: 'The Little Red Hen',
      text: 'Sample text...',
      difficulty: 'beginner',
      completedAt: new Date(),
      score: 92,
      recordings: []
    }
  ]);

  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([]);

  useEffect(() => {
    setChatMessages([
      {
        id: uuidv4(),
        type: 'assistant',
        content: 'Hello! I\'m Uztaz, your reading guide! ü¶ä Ready to have some fun? Pick a story to start!',
        timestamp: new Date()
      }
    ]);
  }, []);
  

  const availableSessions: ReadingSession[] = [
    {
      id: '1',
      title: 'The Little Red Hen',
      text: 'Once upon a time, there was a little red hen who lived on a farm. She was a very hardworking hen and always busy with her daily tasks. One day, while walking around the farmyard, she found some grains of wheat. "Who will help me plant this wheat?" asked the little red hen. The lazy cat said, "Not I." The sleepy dog said, "Not I." The noisy duck said, "Not I." "Then I will do it myself," said the little red hen. And she did.',
      difficulty: 'beginner',
      recordings: []
    },
    {
      id: '2',
      title: 'The Solar System Adventure',
      text: 'Our solar system consists of the Sun and all the celestial bodies that orbit around it. This includes eight planets, their moons, asteroids, comets, and other space debris. The Sun, which is a medium-sized star, provides the energy that makes life possible on Earth. The planets can be divided into two main groups: the inner rocky planets (Mercury, Venus, Earth, and Mars) and the outer gas giants (Jupiter, Saturn, Uranus, and Neptune). Each planet has unique characteristics that make it fascinating to study.',
      difficulty: 'intermediate',
      recordings: []
    },
    {
      id: '3',
      title: 'The Secrets of Climate Science',
      text: 'Climate change represents one of the most significant challenges facing humanity in the twenty-first century. The phenomenon is characterized by long-term alterations in global weather patterns, primarily attributed to increased concentrations of greenhouse gases in the atmosphere. These gases, including carbon dioxide, methane, and nitrous oxide, trap heat from the sun and cause the Earth\'s average temperature to rise. The consequences of this warming trend are far-reaching and include rising sea levels, more frequent extreme weather events, shifts in precipitation patterns, and threats to biodiversity.',
      difficulty: 'advanced',
      recordings: []
    }
  ];

  const handleStartSession = (sessionId: string) => {
    const session = availableSessions.find(s => s.id === sessionId);
    if (session) {
      setCurrentSession(session);
      setCurrentView('reading');
      setChatMessages(prev => [...prev, {
        id: uuidv4(),
        type: 'assistant',
        content: `Great choice! Let's read "${session.title}". Click on any word if you need help with pronunciation.`,
        timestamp: new Date()
      }]);
    }
  };

  const handleCompleteSession = (score: number) => {
    setCurrentView('dashboard');
    const congratsMessage: ChatMessage = {
      id: uuidv4(),
      type: 'assistant',
      content: `Wow! You finished "${currentSession?.title}" with a score of ${score}%! You're doing amazing!`,
      timestamp: new Date(),
      feedback: {
        corrections: [],
        pronunciation: [],
        suggestions: [
          'You read that so smoothly!',
          'Keep up the fantastic work!',
          'Ready for another story?'
        ]
      }
    };
    setChatMessages(prev => [...prev, congratsMessage]);
  };

  const handleSendMessage = (message: string) => {
    const userMessage: ChatMessage = {
      id: uuidv4(),
      type: 'user',
      content: message,
      timestamp: new Date()
    };
    setChatMessages(prev => [...prev, userMessage]);

    setTimeout(() => {
      let assistantResponse: ChatMessage;
      
      if (message.toLowerCase().includes('help me with the word')) {
        const word = message.match(/"([^"]+)"/)?.[1] || 'word';
        assistantResponse = {
          id: uuidv4(),
          type: 'assistant',
          content: `You got it! Let's look at the word "${word}". Here's how I can help:`,
          timestamp: new Date(),
          feedback: {
            corrections: [],
            pronunciation: [word],
            suggestions: [
              `Try saying it slowly: "${word}". Click the word to hear it!`,
              'You can do it!'
            ]
          }
        };
      } else {
        assistantResponse = {
          id: uuidv4(),
          type: 'assistant',
          content: 'I\'m listening! Ask me anything about pronunciation or words. I\'m here to cheer you on! ü¶ä',
          timestamp: new Date()
        };
      }

      setChatMessages(prev => [...prev, assistantResponse]);
    }, 1500);
  };

  return (
    <div className="min-h-screen bg-off-white text-gray-800">
      <Header userProgress={userProgress} onHomeClick={() => setCurrentView('dashboard')} />
      
      <main className="py-8 px-4">
        {currentView === 'dashboard' ? (
          <Dashboard
            userProgress={userProgress}
            recentSessions={recentSessions}
            onStartSession={handleStartSession}
          />
        ) : currentSession ? (
          <div className="max-w-7xl mx-auto">
            <div className="grid lg:grid-cols-3 gap-8">
              <div className="lg:col-span-2">
                <ReadingInterface
                  session={currentSession}
                  onComplete={handleCompleteSession}
                  onWordSelect={setSelectedWord}
                />
              </div>
              <div>
                <UztazFeedback
                  messages={chatMessages}
                  onSendMessage={handleSendMessage}
                  selectedWord={selectedWord}
                />
              </div>
            </div>
          </div>
        ) : null}
      </main>
    </div>
  );
}

export default App;
