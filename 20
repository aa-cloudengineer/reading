import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Send, Bot, User, Lightbulb, Volume2, CheckCircle } from 'lucide-react';
import { ChatMessage } from '../types';

interface ChatAssistantProps {
  messages: ChatMessage[];
  onSendMessage: (message: string) => void;
  selectedWord?: string | null;
}

const ChatAssistant: React.FC<ChatAssistantProps> = ({ 
  messages, 
  onSendMessage, 
  selectedWord 
}) => {
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  useEffect(() => {
    if (selectedWord) {
      handleWordHelp(selectedWord);
    }
  }, [selectedWord]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (inputValue.trim()) {
      onSendMessage(inputValue.trim());
      setInputValue('');
      simulateTyping();
    }
  };

  const handleWordHelp = (word: string) => {
    onSendMessage(`Help me with the word: "${word}"`);
    simulateTyping();
  };

  const simulateTyping = () => {
    setIsTyping(true);
    setTimeout(() => setIsTyping(false), 2000);
  };

  const playPronunciation = (word: string) => {
    if ('speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(word);
      utterance.rate = 0.8;
      utterance.pitch = 1;
      speechSynthesis.speak(utterance);
    }
  };

  return (
    <div className="bg-white rounded-xl shadow-lg h-96 flex flex-col">
      {/* Header */}
      <div className="bg-gradient-to-r from-accent-500 to-accent-600 text-white p-4 rounded-t-xl">
        <div className="flex items-center space-x-2">
          <Bot className="h-5 w-5" />
          <span className="font-semibold">Uztaz Assistant</span>
          <div className="w-2 h-2 bg-green-300 rounded-full animate-pulse"></div>
        </div>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-3">
        <AnimatePresence>
          {messages.map((message) => (
            <motion.div
              key={message.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div
                className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                  message.type === 'user'
                    ? 'bg-primary-500 text-white'
                    : 'bg-gray-100 text-gray-800'
                }`}
              >
                <div className="flex items-start space-x-2">
                  {message.type === 'assistant' && (
                    <Bot className="h-4 w-4 mt-0.5 text-accent-500" />
                  )}
                  {message.type === 'user' && (
                    <User className="h-4 w-4 mt-0.5" />
                  )}
                  <div className="flex-1">
                    <p className="text-sm">{message.content}</p>
                    
                    {/* Feedback Section */}
                    {message.feedback && (
                      <div className="mt-3 space-y-2">
                        {message.feedback.corrections.length > 0 && (
                          <div className="bg-orange-50 border border-orange-200 rounded p-2">
                            <div className="flex items-center space-x-1 mb-1">
                              <Lightbulb className="h-3 w-3 text-orange-500" />
                              <span className="text-xs font-medium text-orange-700">Corrections:</span>
                            </div>
                            {message.feedback.corrections.map((correction, idx) => (
                              <p key={idx} className="text-xs text-orange-600">{correction}</p>
                            ))}
                          </div>
                        )}
                        
                        {message.feedback.pronunciation.length > 0 && (
                          <div className="bg-blue-50 border border-blue-200 rounded p-2">
                            <div className="flex items-center space-x-1 mb-1">
                              <Volume2 className="h-3 w-3 text-blue-500" />
                              <span className="text-xs font-medium text-blue-700">Pronunciation:</span>
                            </div>
                            {message.feedback.pronunciation.map((word, idx) => (
                              <motion.button
                                key={idx}
                                onClick={() => playPronunciation(word)}
                                className="text-xs text-blue-600 hover:text-blue-800 underline mr-2"
                                whileHover={{ scale: 1.05 }}
                              >
                                {word}
                              </motion.button>
                            ))}
                          </div>
                        )}
                        
                        {message.feedback.suggestions.length > 0 && (
                          <div className="bg-green-50 border border-green-200 rounded p-2">
                            <div className="flex items-center space-x-1 mb-1">
                              <CheckCircle className="h-3 w-3 text-green-500" />
                              <span className="text-xs font-medium text-green-700">Suggestions:</span>
                            </div>
                            {message.feedback.suggestions.map((suggestion, idx) => (
                              <p key={idx} className="text-xs text-green-600">{suggestion}</p>
                            ))}
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </motion.div>
          ))}
        </AnimatePresence>

        {/* Typing Indicator */}
        {isTyping && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="flex justify-start"
          >
            <div className="bg-gray-100 text-gray-800 px-4 py-2 rounded-lg max-w-xs">
              <div className="flex items-center space-x-2">
                <Bot className="h-4 w-4 text-accent-500" />
                <div className="flex space-x-1">
                  <div className="w-1 h-1 bg-gray-400 rounded-full animate-bounce"></div>
                  <div className="w-1 h-1 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                  <div className="w-1 h-1 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                </div>
              </div>
            </div>
          </motion.div>
        )}
        
        <div ref={messagesEndRef} />
      </div>

      {/* Input */}
      <form onSubmit={handleSubmit} className="p-4 border-t">
        <div className="flex space-x-2">
          <input
            type="text"
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            placeholder="Ask for help with pronunciation, words, or reading tips..."
            className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-accent-500 text-sm"
          />
          <motion.button
            type="submit"
            className="bg-gradient-to-r from-accent-500 to-accent-600 text-white p-2 rounded-lg shadow-md"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            disabled={!inputValue.trim()}
          >
            <Send className="h-4 w-4" />
          </motion.button>
        </div>
      </form>
    </div>
  );
};

export default ChatAssistant;
