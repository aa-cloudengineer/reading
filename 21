import React from 'react';
import { motion } from 'framer-motion';
import { Play, Star, Clock, TrendingUp, Award, BookOpen } from 'lucide-react';
import { ReadingSession, UserProgress } from '../types';

interface DashboardProps {
  userProgress: UserProgress;
  recentSessions: ReadingSession[];
  onStartSession: (sessionId: string) => void;
}

const Dashboard: React.FC<DashboardProps> = ({ 
  userProgress, 
  recentSessions, 
  onStartSession 
}) => {
  const availableSessions: ReadingSession[] = [
    {
      id: '1',
      title: 'The Little Red Hen',
      text: 'Once upon a time, there was a little red hen who lived on a farm. She was a very hardworking hen...',
      difficulty: 'beginner',
      recordings: []
    },
    {
      id: '2',
      title: 'The Solar System Adventure',
      text: 'Our solar system consists of the Sun and all the celestial bodies that orbit around it. This includes eight planets...',
      difficulty: 'intermediate',
      recordings: []
    },
    {
      id: '3',
      title: 'The Secrets of Climate Science',
      text: 'Climate change represents one of the most significant challenges facing humanity in the twenty-first century...',
      difficulty: 'advanced',
      recordings: []
    }
  ];

  const getDifficultyStyles = (difficulty: string) => {
    switch (difficulty) {
      case 'beginner': return { tag: 'bg-success/20 text-success-dark', border: 'border-success' };
      case 'intermediate': return { tag: 'bg-warning/20 text-warning-dark', border: 'border-warning' };
      case 'advanced': return { tag: 'bg-danger/20 text-danger-dark', border: 'border-danger' };
      default: return { tag: 'bg-gray-200 text-gray-800', border: 'border-gray-300' };
    }
  };

  const stats = [
    { label: 'Reading Time', value: `${Math.floor(userProgress.totalReadingTime / 60)}m`, icon: Clock, color: 'text-primary' },
    { label: 'Avg. Score', value: '92%', icon: TrendingUp, color: 'text-success' },
    { label: 'Badges', value: userProgress.badges.length.toString(), icon: Award, color: 'text-brand' },
    { label: 'Stories Read', value: userProgress.completedSessions.toString(), icon: BookOpen, color: 'text-accent' }
  ];

  return (
    <div className="max-w-7xl mx-auto space-y-12">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="text-center"
      >
        <h2 className="text-4xl font-bold text-brand-dark mb-2">
          Ready for a reading adventure?
        </h2>
        <p className="text-gray-600 text-lg">
          Uztaz is cheering for you! Pick a story and let's begin.
        </p>
      </motion.div>

      <motion.div 
        className="grid grid-cols-2 md:grid-cols-4 gap-6"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ staggerChildren: 0.1, delayChildren: 0.2 }}
      >
        {stats.map((stat) => (
          <motion.div
            key={stat.label}
            className="bg-white rounded-2xl shadow-md p-6 text-center transition-transform duration-300 hover:-translate-y-2"
            variants={{ hidden: { y: 20, opacity: 0 }, visible: { y: 0, opacity: 1 } }}
          >
            <stat.icon className={`h-10 w-10 mx-auto mb-3 ${stat.color}`} strokeWidth={1.5} />
            <div className="text-3xl font-bold text-gray-800">{stat.value}</div>
            <div className="text-sm text-gray-500 mt-1">{stat.label}</div>
          </motion.div>
        ))}
      </motion.div>

      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.4 }}
      >
        <h3 className="text-3xl font-bold text-brand-dark mb-6">Pick a Story to Read</h3>
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
          {availableSessions.map((session, index) => {
            const styles = getDifficultyStyles(session.difficulty);
            return (
            <motion.div
              key={session.id}
              className={`bg-white rounded-2xl shadow-lg overflow-hidden flex flex-col border-b-4 ${styles.border}`}
              whileHover={{ scale: 1.03, shadow: 'xl' }}
              transition={{ type: 'spring', stiffness: 300 }}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.5 + index * 0.1 }}
            >
              <div className="p-6 flex-grow">
                <span className={`px-3 py-1 text-xs font-bold uppercase rounded-full ${styles.tag}`}>
                  {session.difficulty}
                </span>
                <h4 className="text-xl font-semibold text-gray-800 my-3">
                  {session.title}
                </h4>
                <p className="text-gray-600 text-sm mb-4 line-clamp-3">
                  {session.text}
                </p>
              </div>
              
              <div className="p-6 bg-gray-50">
                <motion.button
                  onClick={() => onStartSession(session.id)}
                  className="w-full bg-brand hover:bg-brand-dark text-white py-3 px-4 rounded-lg font-semibold shadow-md hover:shadow-lg transition-all flex items-center justify-center space-x-2"
                  whileHover={{ y: -2 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <Play className="h-5 w-5" />
                  <span>Start Reading</span>
                </motion.button>
              </div>
            </motion.div>
          )})}
        </div>
      </motion.div>
    </div>
  );
};

export default Dashboard;
