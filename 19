import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Play, Pause, Square, Mic, MicOff, Volume2, RotateCcw } from 'lucide-react';
import { useAudioRecorder } from '../hooks/useAudioRecorder';
import { ReadingSession } from '../types';

interface ReadingInterfaceProps {
  session: ReadingSession;
  onComplete: (score: number) => void;
}

const ReadingInterface: React.FC<ReadingInterfaceProps> = ({ session, onComplete }) => {
  const [selectedWord, setSelectedWord] = useState<string | null>(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentAudio, setCurrentAudio] = useState<HTMLAudioElement | null>(null);
  
  const {
    isRecording,
    isPaused,
    recordingTime,
    audioBlob,
    startRecording,
    stopRecording,
    pauseRecording,
    resumeRecording,
    clearRecording,
  } = useAudioRecorder();

  const formatTime = (seconds: number): string => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const playRecording = () => {
    if (audioBlob) {
      const audio = new Audio(URL.createObjectURL(audioBlob));
      setCurrentAudio(audio);
      audio.play();
      setIsPlaying(true);
      
      audio.onended = () => {
        setIsPlaying(false);
        setCurrentAudio(null);
      };
    }
  };

  const stopPlayback = () => {
    if (currentAudio) {
      currentAudio.pause();
      currentAudio.currentTime = 0;
      setIsPlaying(false);
      setCurrentAudio(null);
    }
  };

  const handleWordClick = (word: string) => {
    setSelectedWord(word);
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'beginner': return 'from-success-400 to-success-600';
      case 'intermediate': return 'from-warning-400 to-warning-600';
      case 'advanced': return 'from-accent-400 to-accent-600';
      default: return 'from-primary-400 to-primary-600';
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-6">
      {/* Session Header */}
      <motion.div 
        className={`bg-gradient-to-r ${getDifficultyColor(session.difficulty)} text-white p-6 rounded-xl shadow-lg`}
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
      >
        <h2 className="text-2xl font-bold mb-2">{session.title}</h2>
        <div className="flex items-center space-x-4">
          <span className="bg-white/20 px-3 py-1 rounded-full text-sm capitalize font-medium">
            {session.difficulty}
          </span>
          <span className="text-sm opacity-90">Click words for pronunciation help</span>
        </div>
      </motion.div>

      {/* Reading Text */}
      <motion.div 
        className="bg-white rounded-xl shadow-lg p-8"
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ delay: 0.2 }}
      >
        <div className="prose prose-lg max-w-none">
          <p className="text-lg leading-relaxed text-gray-800">
            {session.text.split(' ').map((word, index) => (
              <motion.span
                key={index}
                className={`cursor-pointer hover:bg-primary-100 px-1 py-0.5 rounded transition-colors ${
                  selectedWord === word.replace(/[.,!?]/g, '') ? 'bg-primary-200' : ''
                }`}
                onClick={() => handleWordClick(word.replace(/[.,!?]/g, ''))}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                {word}{' '}
              </motion.span>
            ))}
          </p>
        </div>
      </motion.div>

      {/* Recording Controls */}
      <motion.div 
        className="bg-white rounded-xl shadow-lg p-6"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.4 }}
      >
        <h3 className="text-xl font-semibold mb-4 text-gray-800">Practice Recording</h3>
        
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center space-x-4">
            {!isRecording ? (
              <motion.button
                onClick={startRecording}
                className="bg-gradient-to-r from-success-500 to-success-600 text-white p-4 rounded-full shadow-lg hover:shadow-xl transition-all"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <Mic className="h-6 w-6" />
              </motion.button>
            ) : (
              <div className="flex items-center space-x-2">
                {!isPaused ? (
                  <motion.button
                    onClick={pauseRecording}
                    className="bg-gradient-to-r from-warning-500 to-warning-600 text-white p-4 rounded-full shadow-lg"
                    whileHover={{ scale: 1.05 }}
                  >
                    <Pause className="h-6 w-6" />
                  </motion.button>
                ) : (
                  <motion.button
                    onClick={resumeRecording}
                    className="bg-gradient-to-r from-success-500 to-success-600 text-white p-4 rounded-full shadow-lg"
                    whileHover={{ scale: 1.05 }}
                  >
                    <Play className="h-6 w-6" />
                  </motion.button>
                )}
                
                <motion.button
                  onClick={stopRecording}
                  className="bg-gradient-to-r from-red-500 to-red-600 text-white p-4 rounded-full shadow-lg"
                  whileHover={{ scale: 1.05 }}
                >
                  <Square className="h-6 w-6" />
                </motion.button>
              </div>
            )}
            
            <div className="text-lg font-mono">
              {formatTime(recordingTime)}
            </div>
          </div>

          {isRecording && (
            <motion.div 
              className="flex items-center space-x-2 text-red-500"
              animate={{ opacity: [1, 0.5, 1] }}
              transition={{ repeat: Infinity, duration: 1 }}
            >
              <div className="w-3 h-3 bg-red-500 rounded-full"></div>
              <span className="font-medium">Recording...</span>
            </motion.div>
          )}
        </div>

        {/* Playback Controls */}
        {audioBlob && (
          <motion.div 
            className="bg-gray-50 rounded-lg p-4"
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
          >
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <motion.button
                  onClick={isPlaying ? stopPlayback : playRecording}
                  className="bg-gradient-to-r from-primary-500 to-primary-600 text-white p-3 rounded-full shadow-md"
                  whileHover={{ scale: 1.05 }}
                >
                  {isPlaying ? <Pause className="h-5 w-5" /> : <Volume2 className="h-5 w-5" />}
                </motion.button>
                <span className="text-sm text-gray-600">
                  {isPlaying ? 'Playing your recording...' : 'Click to play your recording'}
                </span>
              </div>
              
              <motion.button
                onClick={clearRecording}
                className="text-gray-500 hover:text-red-500 transition-colors"
                whileHover={{ scale: 1.05 }}
              >
                <RotateCcw className="h-5 w-5" />
              </motion.button>
            </div>
          </motion.div>
        )}
      </motion.div>

      {/* Complete Button */}
      <motion.div 
        className="text-center"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.6 }}
      >
        <motion.button
          onClick={() => onComplete(85)}
          className="bg-gradient-to-r from-accent-500 to-accent-600 text-white px-8 py-3 rounded-full font-semibold shadow-lg hover:shadow-xl transition-all"
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          disabled={!audioBlob}
        >
          Complete Session & Get Feedback
        </motion.button>
      </motion.div>
    </div>
  );
};

export default ReadingInterface;
